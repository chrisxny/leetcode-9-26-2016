Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.


Example 1:

Input: k = 3, n = 7

Output:

[[1,2,4]]

Example 2:

Input: k = 3, n = 9

Output:

[[1,2,6], [1,3,5], [2,3,4]]


public class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
         List<List<Integer>> res = new ArrayList<List<Integer>>(); //??List or arraylist??
         List<Integer> cur = new ArrayList<Integer>();
         helper(res, cur, k, 1, n);//??
         return res;
         
    }
    
    private void helper(List<List<Integer>>res, List<Integer> cur, int k, int start, int sum){
        if(sum<0){
            return;
        }
        
        if(sum == 0 && cur.size()==k){
            res.add(new ArrayList<Integer>(cur));
            return;
        }
        
        for(int i = sta5rt; i <=9;i++){
            cur.add(i);
            helper(res,cur,k,i+1,sum-i);
            cur.remove(cur.size()-1);
        }
    }
}
